# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

# name: Build and deploy an app to AKS
# on: repository_dispatch

name: Build and deploy an app to AKS
on:
  push:
    branches:
      - main
  workflow_dispatch:
  
env:
  AZURE_CONTAINER_REGISTRY: "acrgithubaction"
  CONTAINER_NAME: "dcfcss"
  RESOURCE_GROUP: "rgGithubActionDeploy"
  CLUSTER_NAME: "aksclstrgithubaction"
  IMAGE_PULL_SECRET_NAME: "githubactionsecret"
  DEPLOYMENT_MANIFEST_PATH: "manifests/deployment.yaml"

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: /home/runner/work/Manifest/Manifest
    steps:
    # Checks out multiple repositories 
    - name: Checkout1 bphx.cool.angular
      uses: actions/checkout@v3
      with:
          repository: deepansahayajerin/bphx.cool.angular
    - name: Test1
      run: ls            
    - name: Checkout2 Bphx.Cool.Net
      uses: actions/checkout@v3
      with:
          repository: deepansahayajerin/Bphx.Cool.Net  
    - name: Test2
      run: ls              
    - name: Checkout3 cool-gen-kansasdcf
      uses: actions/checkout@v3
      with:
          repository: deepansahayajerin/cool-gen-kansasdcf   
    - name: Test3
      run: ls              
    - name: Checkout4 kansasdcf-frameworks-code
      uses: actions/checkout@v3
      with:
          repository: deepansahayajerin/kansasdcf-frameworks-code 
    - name: Test4
      run: ls              
    - name: Checkout5 kansasdcf-gen-code
      uses: actions/checkout@v3
      with:
          repository: deepansahayajerin/kansasdcf-gen-code
    - name: Test5
      run: ls              
    - name: Checkout6 Manifest
      uses: actions/checkout@v3
      with:
          repository: deepansahayajerin/Manifest  
    - name: Test6
      run: ls    
